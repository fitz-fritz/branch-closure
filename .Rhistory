library(RJSONIO)
# extracting data from the website
Raw <- fromJSON(
"https://geoportal.stadt-koeln.de/arcgis/rest/services/Politik_und_Verwaltung/Stolpersteine/MapServer/2/query?where=id+is+not+null&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&distance=&units=esriSRUnit_Foot&relationParam=&outFields=*&returnGeometry=true&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=4326&havingClause=&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&historicMoment=&returnDistinctValues=false&resultOffset=&resultRecordCount=&returnExtentOnly=false&datumTransformation=&parameterValues=&rangeValues=&quantizationParameters=&featureEncoding=esriDefault&f=geojson")
View(Raw)
library(rjson)
library(RJSONIO)
# extracting data from the website
Raw <- fromJSON(
"https://geoportal.stadt-koeln.de/arcgis/rest/services/Politik_und_Verwaltung/Stolpersteine/MapServer/2/query?where=id+is+not+null&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&distance=&units=esriSRUnit_Foot&relationParam=&outFields=*&returnGeometry=true&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=4326&havingClause=&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&historicMoment=&returnDistinctValues=false&resultOffset=&resultRecordCount=&returnExtentOnly=false&datumTransformation=&parameterValues=&rangeValues=&quantizationParameters=&featureEncoding=esriDefault&f=geojson")
View(Raw)
library(shiny); runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('stolpersteine_app.R')
runApp('stolpersteine_app.R')
runApp('stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
runApp('D:/Users/green/Documents/R-Studio/Skripte/Projekt_Coba')
runApp('C:/Users/green/Documents/Stolpersteine/stolpersteine_app.R')
#load raw data
df_2016 = read.csv("C:/Users/green/Documents/R-Studio/Skripte/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ".",encoding = "UTF-8")
#load raw data
df_2016 = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ".",encoding = "UTF-8")
#load raw data
df = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ".",encoding = "UTF-8")
data = rbind.data.frame()
View(df)
data_cluster <- cbind.data.frame(df$X.U.FEFF.Umsatz, df$Obligo)
colnames(data_cluster) <- c("Umsatz" ,"Obligo",)
colnames(data_cluster) <- c("Umsatz" ,"Obligo")
data_wide <-data_cluster %>%
pivot_wider(, values_from = Umsatz)  %>%
mutate_at(vars(-Sparkasse), as.numeric)
library(tidyverse)
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggthemes)
library("ggpubr")
library("scales")
data_wide <-data_cluster %>%
pivot_wider(names_from = Jahr, values_from = Umsatz)  %>%
mutate_at(vars(-Sparkasse), as.numeric)
install.packages(c("BH", "bookdown", "broom", "cachem", "classInt", "cli", "colorspace", "curl", "data.table", "dplyr", "e1071", "evaluate", "fansi", "fastmap", "flexdashboard", "fontawesome", "fs", "geojsonio", "geometries", "ggiraph", "ggplot2", "ggpubr", "ggrepel", "ggsci", "htmlwidgets", "httpuv", "httr", "knitr", "leaflet", "lme4", "markdown", "openssl", "packrat", "pbkrtest", "protolite", "purrr", "raster", "Rcpp", "RcppSimdJson", "readr", "rgdal", "rgeos", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstatix", "s2", "sass", "sf", "sfheaders", "shinyWidgets", "sourcetools", "sp", "stringi", "svglite", "terra", "testthat", "tibble", "tidyr", "tinytex", "triebeard", "utf8", "vctrs", "vroom", "wk", "xfun", "yaml"))
install.packages(c("BH", "bookdown", "broom", "cachem", "classInt", "cli", "colorspace", "curl", "data.table", "dplyr", "e1071", "evaluate", "fansi", "fastmap", "flexdashboard", "fontawesome", "fs", "geojsonio", "geometries", "ggiraph", "ggplot2", "ggpubr", "ggrepel", "ggsci", "htmlwidgets", "httpuv", "httr", "knitr", "leaflet", "lme4", "markdown", "openssl", "packrat", "pbkrtest", "protolite", "purrr", "raster", "Rcpp", "RcppSimdJson", "readr", "rgdal", "rgeos", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstatix", "s2", "sass", "sf", "sfheaders", "shinyWidgets", "sourcetools", "sp", "stringi", "svglite", "terra", "testthat", "tibble", "tidyr", "tinytex", "triebeard", "utf8", "vctrs", "vroom", "wk", "xfun", "yaml"))
install.packages(c("BH", "bookdown", "broom", "cachem", "classInt", "cli", "colorspace", "curl", "data.table", "dplyr", "e1071", "evaluate", "fansi", "fastmap", "flexdashboard", "fontawesome", "fs", "geojsonio", "geometries", "ggiraph", "ggplot2", "ggpubr", "ggrepel", "ggsci", "htmlwidgets", "httpuv", "httr", "knitr", "leaflet", "lme4", "markdown", "openssl", "packrat", "pbkrtest", "protolite", "purrr", "raster", "Rcpp", "RcppSimdJson", "readr", "rgdal", "rgeos", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstatix", "s2", "sass", "sf", "sfheaders", "shinyWidgets", "sourcetools", "sp", "stringi", "svglite", "terra", "testthat", "tibble", "tidyr", "tinytex", "triebeard", "utf8", "vctrs", "vroom", "wk", "xfun", "yaml"))
install.packages(c("BH", "bookdown", "broom", "cachem", "classInt", "cli", "colorspace", "curl", "data.table", "dplyr", "e1071", "evaluate", "fansi", "fastmap", "flexdashboard", "fontawesome", "fs", "geojsonio", "geometries", "ggiraph", "ggplot2", "ggpubr", "ggrepel", "ggsci", "htmlwidgets", "httpuv", "httr", "knitr", "leaflet", "lme4", "markdown", "openssl", "packrat", "pbkrtest", "protolite", "purrr", "raster", "Rcpp", "RcppSimdJson", "readr", "rgdal", "rgeos", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstatix", "s2", "sass", "sf", "sfheaders", "shinyWidgets", "sourcetools", "sp", "stringi", "svglite", "terra", "testthat", "tibble", "tidyr", "tinytex", "triebeard", "utf8", "vctrs", "vroom", "wk", "xfun", "yaml"))
install.packages(c("BH", "bookdown", "broom", "cachem", "classInt", "cli", "colorspace", "curl", "data.table", "dplyr", "e1071", "evaluate", "fansi", "fastmap", "flexdashboard", "fontawesome", "fs", "geojsonio", "geometries", "ggiraph", "ggplot2", "ggpubr", "ggrepel", "ggsci", "htmlwidgets", "httpuv", "httr", "knitr", "leaflet", "lme4", "markdown", "openssl", "packrat", "pbkrtest", "protolite", "purrr", "raster", "Rcpp", "RcppSimdJson", "readr", "rgdal", "rgeos", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstatix", "s2", "sass", "sf", "sfheaders", "shinyWidgets", "sourcetools", "sp", "stringi", "svglite", "terra", "testthat", "tibble", "tidyr", "tinytex", "triebeard", "utf8", "vctrs", "vroom", "wk", "xfun", "yaml"))
install.packages(c("BH", "bookdown", "broom", "cachem", "classInt", "cli", "colorspace", "curl", "data.table", "dplyr", "e1071", "evaluate", "fansi", "fastmap", "flexdashboard", "fontawesome", "fs", "geojsonio", "geometries", "ggiraph", "ggplot2", "ggpubr", "ggrepel", "ggsci", "htmlwidgets", "httpuv", "httr", "knitr", "leaflet", "lme4", "markdown", "openssl", "packrat", "pbkrtest", "protolite", "purrr", "raster", "Rcpp", "RcppSimdJson", "readr", "rgdal", "rgeos", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstatix", "s2", "sass", "sf", "sfheaders", "shinyWidgets", "sourcetools", "sp", "stringi", "svglite", "terra", "testthat", "tibble", "tidyr", "tinytex", "triebeard", "utf8", "vctrs", "vroom", "wk", "xfun", "yaml"))
#load raw data
df = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ".",encoding = "UTF-8")
data_cluster <- cbind.data.frame(df$X.U.FEFF.Umsatz, df$Obligo)
colnames(data_cluster) <- c("Umsatz" ,"Obligo")
data_wide <-data_cluster %>%
pivot_wider(names_from = Jahr, values_from = Umsatz)  %>%
mutate_at(vars(-Sparkasse), as.numeric)
library(tidyverse)
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggthemes)
library("ggpubr")
library("scales")
data_cluster <- cbind.data.frame(df$X.U.FEFF.Umsatz, df$Obligo)
colnames(data_cluster) <- c("Umsatz" ,"Obligo")
data_wide <-data_cluster %>%
pivot_wider(names_from = Jahr, values_from = Umsatz)  %>%
mutate_at(vars(-Sparkasse), as.numeric)
wss <- map_dbl(1:5, ~{kmeans(select(data, ), ., nstart=50,iter.max = 15 )$tot.withinss})
install.packages("lubridate")
library(tidyverse)
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggthemes)
library("ggpubr")
library("scales")
data_wide <-data_cluster %>%
pivot_wider(names_from = Jahr, values_from = Umsatz)  %>%
mutate_at(vars(-Sparkasse), as.numeric)
wss <- map_dbl(1:5, ~{kmeans(select(data, ), ., nstart=50,iter.max = 15 )$tot.withinss})
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggthemes)
library("ggpubr")
library("scales")
data_wide <-data_cluster %>%
pivot_wider(names_from = Jahr, values_from = Umsatz)  %>%
mutate_at(vars(-Sparkasse), as.numeric)
wss <- map_dbl(1:5, ~{kmeans(select(data, ), ., nstart=50,iter.max = 15 )$tot.withinss})
wss <- map_dbl(1:5, ~{kmeans(select(data_cluster, ), ., nstart=50,iter.max = 15 )$tot.withinss})
rlang::last_trace()
n_clust <- 1:5
elbow_df <- as.data.frame(cbind("n_clust" = n_clust, "wss" = wss))
wss <- map_dbl(1:5, ~{kmeans(select(data_cluster, ), ., nstart=50,iter.max = 15 )$tot.withinss})
wss <- map_dbl(1:10, ~{kmeans(select(data_cluster, ), ., nstart=50,iter.max = 15 )$tot.withinss})
View(data_cluster)
#load raw data
df = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ",",encoding = "UTF-8")
data_cluster <- cbind.data.frame(df$X.U.FEFF.Umsatz, df$Obligo)
colnames(data_cluster) <- c("Umsatz" ,"Obligo")
wss <- map_dbl(1:10, ~{kmeans(select(data_cluster, ), ., nstart=50,iter.max = 15 )$tot.withinss})
View(data_cluster)
as.numeric(df)
as.numeric(df$X.U.FEFF.Umsatz)
#load raw data
df = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ".",encoding = "UTF-8")
as.numeric(df$X.U.FEFF.Umsatz)
as.numeric(data_cluster$Umsatz)
#load raw data
df = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ",",encoding = "UTF-8")
data_cluster <- cbind.data.frame(df$X.U.FEFF.Umsatz, df$Obligo)
colnames(data_cluster) <- c("Umsatz" ,"Obligo")
data_wide <-data_cluster %>%
pivot_wider(names_from = Jahr, values_from = Umsatz)  %>%
mutate_at(vars(-Sparkasse), as.numeric)
wss <- map_dbl(1:5, ~{kmeans(select(data_cluster, ), ., nstart=50,iter.max = 15 )$tot.withinss})
View(data_cluster)
data_wide <-data_cluster %>%
pivot_wider(values_from = Umsatz)  %>%
mutate_at(vars(-Sparkasse), as.numeric)
data_wide <-data_cluster %>%
pivot_wider(values_from = Umsatz)
View(data_cluster)
#load raw data
df = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ",",encoding = "UTF-8")
colnames(df) <- c("Sparkasse","Kunde","Jahr","Umsatz" ,"Obligo")
#load raw data
data_cluster = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ",",encoding = "UTF-8")
colnames(data_cluster) <- c("Sparkasse","Kunde","Jahr","Umsatz" ,"Obligo")
data_wide <-data_cluster %>%
pivot_wider(names_from = Jahr, values_from = Umsatz)  %>%
mutate_at(vars(-Sparkasse), as.numeric)
wss <- map_dbl(1:5, ~{kmeans(select(data_cluster, ), ., nstart=50,iter.max = 15 )$tot.withinss})
n_clust <- 1:5
elbow_df <- as.data.frame(cbind("n_clust" = n_clust, "wss" = wss))
data_wide <-data_cluster %>%
pivot_wider(names_from = Jahr, values_from = Umsatz)  %>%
mutate_at(vars(-Sparkasse), as.numeric)
View(data_wide)
View(data_cluster)
View(data_wide)
View(data_cluster)
View(data_cluster)
View(data_cluster)
View(data_wide)
View(data_cluster)
#load raw data
data_cluster = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ",",encoding = "UTF-8")
colnames(data_cluster) <- c("Sparkasse","Jahr","Umsatz" ,"Obligo")
data_wide <-data_cluster %>%
pivot_wider(names_from = Jahr, values_from = Umsatz)  %>%
mutate_at(vars(-Sparkasse), as.numeric)
wss <- map_dbl(1:5, ~{kmeans(select(data_cluster, ), ., nstart=50,iter.max = 50 )$tot.withinss})
n_clust <- 1:5
elbow_df <- as.data.frame(cbind("n_clust" = n_clust, "wss" = wss))
wss <- map_dbl(1:5, ~{kmeans(select(data_cluster, ), ., nstart=50,iter.max = 50 )$tot.withinss})
rlang::last_trace()
rlang::last_trace(drop = FALSE)
View(data_wide)
#load raw data
data_cluster = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ",",encoding = "UTF-8")
colnames(data_cluster) <- c("Sparkasse","Jahr","Umsatz" ,"Obligo")
data_wide <-data_cluster %>%
pivot_wider(names_from = Jahr, values_from = Umsatz)  %>%
mutate_at(vars(-Sparkasse), as.numeric)
wss <- map_dbl(1:5, ~{kmeans(select(data_cluster, ), ., nstart=50,iter.max = 50 )$tot.withinss})
n_clust <- 1:5
elbow_df <- as.data.frame(cbind("n_clust" = n_clust, "wss" = wss))
wss <- map_dbl(1:5, ~{kmeans(select(data_wide, ), ., nstart=50,iter.max = 50 )$tot.withinss})
data <- select(data_cluster, c(3:4))
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss
}
wssplot
plot(wssplot)
colnames(data_cluster) <- c("Sparkasse","Jahr","Umsatz" ,"Obligo")
wss
wss
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss
}
View(wssplot)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggfortify")
install.packages("ggplot2")
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
#load raw data
data_cluster = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ",",encoding = "UTF-8")
data <- select(data_cluster, c(3:4))
library(tidyverse)
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggthemes)
library(ggfortify)
library("ggpubr")
library("scales")
#load raw data
data_cluster = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ",",encoding = "UTF-8")
data <- select(data_cluster, c(3:4))
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss
}
wss
fviz_nbclust(data, kmeans, method = "wss")
install.packages("cluster")
install.packages("factoextra")
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
fviz_nbclust(data, kmeans, method = "wss")
k2 <- kmeans(data, centers = 3, nstart = 25)
fviz_cluster(k2, data = data)
distance <- get_dist(data)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
k2 <- kmeans(data, centers = 3, nstart = 25)
fviz_cluster(k2, data = data)
k2 <- kmeans(data, centers = 2, nstart = 25)
fviz_cluster(k2, data = data)
k2 <- kmeans(data, centers = 4, nstart = 25)
fviz_cluster(k2, data = data)
k2 <- kmeans(data, centers = 8, nstart = 25)
fviz_cluster(k2, data = data)
#load raw data
data_cluster = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ",",encoding = "UTF-8")
data <- select(data_cluster, c(3:4))
fviz_nbclust(data, kmeans, method = "wss")
k2 <- kmeans(data, centers = 8, nstart = 25)
k2 <- kmeans(data, centers = 2, nstart = 25)
fviz_cluster(k2, data = data)
k2 <- kmeans(data, centers = 3, nstart = 25)
fviz_cluster(k2, data = data)
fviz_nbclust(x = data,FUNcluster = kmeans, method = 'wss' )
fviz_nbclust(data, kmeans, method = "wss")
fviz_nbclust(x = data,FUNcluster = kmeans, method = 'wss' )
wssplot <- function(data, nc = 15, set.seed = 1234){
wss <- (nrow(data) - 1)*sum(apply(data, 2, var))
for(i in 2:nc) {
set.seed(1234)
wss[i] <- sum(kmeans(x = data, centers = i, nstart = 25)$withinss)
}
plot(1:nc, wss, type = 'b', xlab = 'Number of Clusters', ylab = 'Within Group Sum of Square',
main = 'Elbow Method Plot to Find Optimal Number of Clusters', frame.plot = T,
col = 'blue', lwd = 1.5)
}
wssplot(data)
fviz_nbclust(x = data,FUNcluster = kmeans, method = 'silhouette' )
k2 <- kmeans(data, centers = 3, nstart = 25)
fviz_cluster(k2, data = data)
k2
#load raw data
data_cluster = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ",",encoding = "UTF-8")
data <- select(data_cluster, c(3:4))
fviz_nbclust(data, kmeans, method = "wss")
fviz_nbclust(x = data,FUNcluster = kmeans, method = 'wss' )
k2 <- kmeans(data, centers = 3, nstart = 25)
fviz_cluster(k2, data = data)
distance <- get_dist(data)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
fviz_nbclust(x = data,FUNcluster = kmeans, method = 'silhouette' )
#load raw data
data_cluster = read.csv("C:/Users/green/Documents/Webprojekte/R/Clustering/data_Kunde.csv", header = TRUE, sep = ";", dec = ",",encoding = "UTF-8")
data <- select(data_cluster, c(3:4))
fviz_nbclust(data, kmeans, method = "wss")
fviz_nbclust(x = data,FUNcluster = kmeans, method = 'wss' )
k2 <- kmeans(data, centers = 3, nstart = 25)
fviz_cluster(k2, data = data)
plot(data$Umsatz, data$Obligo)
shiny::runApp('C:/Users/green/Documents/Webprojekte/R/Branch Closures/branch-closure')
